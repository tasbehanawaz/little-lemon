/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable no-undef */
import React, { useState } from 'react';

// eslint-disable-next-line no-unused-vars

function updateTimes(date) {
  const selectedDate = new Date(date);
  const dayOfWeek = selectedDate.getDay(); // 0 (Sunday) - 6 (Saturday)

  // If the selected date is a weekend (Saturday or Sunday), return a different set of available times
  if (dayOfWeek === 0 || dayOfWeek === 6) {
    return [
      '12:00',
      '13:00',
      '14:00',
      '15:00',
      '16:00',
      '17:00',
      '18:00',
      '19:00',
    ];
  }

  // Otherwise, return the default set of available times
  return [
    '17:00',
    '18:00',
    '19:00',
    '20:00',
    '21:00',
    '22:00',
  ];
}

function initializeTimes() {
  const currentDate = new Date().toISOString().slice(0, 10); // get the current date in YYYY-MM-DD format
  return updateTimes(currentDate);
}

// eslint-disable-next-line no-unused-vars
const [availableTimes, dispatch] = useReducer(
  (state, action) => {
    switch (action.type) {
      case 'UPDATE_TIMES':
        const newTimes = updateTimes(action.payload);
        return newTimes;
      default:
        return state;
    }
  },
  initializeTimes()
);


function BookingForm(props) {
  const [reservationData, setReservationData] = useState({
    date: '',
    time: '17:00',
    guests: 1,
    occasion: 'Birthday',
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setReservationData((prevState) => ({ ...prevState, [name]: value }));
  };

  const handleReservation = () => {
    const bookedTime = reservationData.time;
    const newAvailableTimes = props.availableTimes.filter((time) => time !== bookedTime);
    props.setAvailableTimes(newAvailableTimes);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    handleReservation();
    console.log(reservationData);
  };

  return (
    <form onSubmit={handleSubmit} style={{ display: 'grid', maxWidth: '200px', gap: '20px' }}>
      <label htmlFor="date">Choose date</label>
      <input
        type="date"
        id="date"
        name="date"
        value={reservationData.date}
        onChange={handleChange}
        required
      />
      <label htmlFor="time">Choose time</label>
      <select id="time" name="time" value={reservationData.time} onChange={handleChange}>
        {props.availableTimes.map((time) => (
          <option key={time} value={time}>
            {time}
          </option>
        ))}
      </select>
      <label htmlFor="guests">Number of guests</label>
      <input
        type="number"
        id="guests"
        name="guests"
        value={reservationData.guests}
        onChange={handleChange}
        min="1"
        max="10"
        required
      />
      <label htmlFor="occasion">Occasion</label>
      <select
        id="occasion"
        name="occasion"
        value={reservationData.occasion}
        onChange={handleChange}
      >
        <option value="Birthday">Birthday</option>
        <option value="Anniversary">Anniversary</option>
      </select>
      <input type="submit" value="Make Your reservation" />
    </form>
  );
};

export default BookingForm;